
[{"content":"","date":"17 February 2025","externalUrl":null,"permalink":"/","section":" ","summary":"","title":" ","type":"page"},{"content":"","date":"17 February 2025","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","date":"17 February 2025","externalUrl":null,"permalink":"/blogs/","section":"Blogs","summary":"","title":"Blogs","type":"blogs"},{"content":"","date":"17 February 2025","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"17 February 2025","externalUrl":null,"permalink":"/tags/chemistry/","section":"Tags","summary":"","title":"Chemistry","type":"tags"},{"content":"","date":"17 February 2025","externalUrl":null,"permalink":"/tags/gaussian/","section":"Tags","summary":"","title":"Gaussian","type":"tags"},{"content":"课题组同门要做一个双自由基分子，虽然终产还没拿到，但是可以先算算性质，于是在网上搜了搜计算双自由基的教程。\n参考：http://sobereva.com/264、http://sobereva.com/353\n一、计算关键词 # 主要为：开壳层使用 ub3lyp 泛函（unrestricted）；自由基分子如果电子和质子数相等则为中性；基态的双自由基自旋多重度有两种情况 $s=1$ 和 $s=3$；双自由基的自旋对称破缺态需要加 gues(mix,alter)​ 。\n单线态：\n%chk=2C-s.chk %nproc=32 %mem=80GB # opt ub3lyp/6-311g(d,p) emp(gd3bj) scf(maxcycle=64) freq scrf(solvent=toluene) 2C-s 0 1 C -8.87930000 0.59590000 -0.35860000 三线态：\n%chk=2C-t.chk %nproc=32 %mem=80GB # opt ub3lyp/6-311g(d,p) emp(gd3bj) scf(maxcycle=64) freq scrf(solvent=toluene) 2C-t 0 3 C -8.87930000 0.59590000 -0.35860000 自旋对称破缺态：\n%chk=2C-bs.chk %nproc=32 %mem=80GB # opt ub3lyp/6-311g(d,p) emp(gd3bj) scf(maxcycle=64) freq scrf(solvent=toluene) guess(mix,alter) nosym 2C-bs 0 1 C -8.87930000 0.59590000 -0.35860000 ‍\n二、自旋密度分布图 # 将计算的 chk 转为 fchk 导入到 Multiwfn\n5 //计算格点数据 5 //自旋密度 2 //用中等质量格点，总共算约51200个点。对于较大体系，建议选3用高质量格点（对于很大体系则建议选4并输入较大格点数），否则等值面可能不平滑 2 Export data to a Gaussian-type cube file in current folder // 3 Export data to output.txt in current folder 0 7 //布居分析 5 //Mulliken分析（如果用SCPA，选7；用Lowdin，选6） 1 //Output Mulliken population and atomic charges y 三、基于 alpha 和 beta轨道重叠来计算 双自由基特征 # 相关引用文献：Chem. Phys. Lett., 33, 330 (1975)\n将 fchk 文件载入 Multiwfn 后依次输入 100 //其它功能（Part 1） 12 //双正交化 1 //双正交化占据轨道 0 //不计算双正交化轨道能量 此时从屏幕上可见 Singular values of orbital overlap matrix: 1.0000 1.0000 1.0000 1.0000 0.9999 0.9999 0.9999 0.9998 0.9993 0.9991 0.9990 0.9990 0.9968 0.9965 0.9960 0.1231 前 n 号alpha/beta分子轨道都是占据轨道（重叠积分接近 1 ）。可见第 n 号 alpha 和 beta 分子轨道的重叠积分的绝对值 0.042710很小，说明这两条轨道分离很充分，而其它序号相同的 alpha 和 beta 占据轨道之间则重叠积分的绝对值都很接近 1，因此第16号 alpha 和 beta 分子轨道的重叠积分 0.042710 就可以作为前式中的 T。把 T=0.042710代入y表达式，得到双自由基特征为0.915，比2.2节基于CAS(2,2) 波函数得到的 0.732 大不少。$y=1-(2*T)/(1+T^2)$\n可见，双激发组态的权重c22越大，双自由基特征越强，和基态组态权重c12相同时就是完美双自由基。基于这个考虑，Yamaguchi在Chem. Phys. Lett., 33, 330 (1975)中将y=2*c22定义为双自由基特征，完美双自由基时 c2=1/2，故 y 恰为1。\n‍\n","date":"17 February 2025","externalUrl":null,"permalink":"/blogs/250217-calbirad/","section":"Blogs","summary":"课题组同门要做一个双自由基分子，虽然终产还没拿到，但是可以先算算性质。","title":"Gaussian | 计算双自由基","type":"blogs"},{"content":"","date":"17 February 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"17 February 2025","externalUrl":null,"permalink":"/categories/work/","section":"Categories","summary":"","title":"Work","type":"categories"},{"content":"","date":"17 February 2025","externalUrl":null,"permalink":"/authors/%E8%91%9B%E4%B8%96%E6%9D%B0/","section":"Authors","summary":"","title":"葛世杰","type":"authors"},{"content":"","date":"15 February 2025","externalUrl":null,"permalink":"/tags/docker/","section":"Tags","summary":"","title":"Docker","type":"tags"},{"content":"","date":"15 February 2025","externalUrl":null,"permalink":"/tags/web/","section":"Tags","summary":"","title":"Web","type":"tags"},{"content":"molOCR 开源项目可以将图片转化学结构，对科研工作者极为方便。很多商业软件也可以实现这个功能，但是一般都需要登录和氪金。感谢开源项目：molOCR （前端）以及 chembl_beaker （后端）\n本课题组有量化计算用的服务器，在网上刷到 纯白纱陵 博客文章：利用molOCR截图识别文献中的结构，故在本地部署 molOCR 。由于课题组服务器是在校园网内，有不同网段，做端口转发，中间遇到了一些问题并解决，特来记录。\n一、后端 chembl_beaker​ 部署 # ###1. 拉取项目\n默认你的 Linux 已经安装 docker 以及 root 登录 SSH。\n# 新建文件夹 mkdir -p ./docker/molOCR \u0026amp;\u0026amp; cd ./docker/molOCR # 下载项目 wget https://github.com/def-fun/chembl_beaker/archive/refs/heads/master.zip unzip chembl_beaker-master.zip cd chembl_beaker-master 在这里，我的 docker 版本为 Docker version 27.3.1, build ce12230​ 不能直接 Build 镜像，否则 env 环境变量不能读取，出现 warning​ 导致识别识别失败。\n询问 deepseek：将 Dockerfile 复制为 Dockerfile_backpack，然后修改 Dockerfile （将 ENV ~ 后面加 = ）内容为：\nFROM debian:bookworm-slim ENV PYTHONUNBUFFERED=1 # install required ubuntu packages RUN apt-get update --fix-missing \u0026amp;\u0026amp; \\ apt-get install -y --no-install-recommends ca-certificates libxrender1 libxext6 wget bzip2 osra libopenbabel7 libpotrace0 \u0026amp;\u0026amp; \\ apt-get -qq -y autoremove \u0026amp;\u0026amp; \\ apt-get autoclean \u0026amp;\u0026amp; \\ rm -rf /var/lib/apt/lists/* /var/log/dpkg.log # install miniconda RUN wget --quiet https://repo.continuum.io/miniconda/Miniconda3-4.7.12.1-Linux-x86_64.sh -O ~/miniconda.sh \u0026amp;\u0026amp; \\ /bin/bash ~/miniconda.sh -b -p /opt/conda \u0026amp;\u0026amp; \\ rm -rf $HOME/conda/pkgs/* \u0026amp;\u0026amp; \\ rm ~/miniconda.sh # add conda bin to path ENV PATH=/opt/conda/bin:$PATH # use the environment.yml to create the conda env COPY environment.yml /tmp/environment.yml # create the conda env using saved environment file RUN conda env create -n chembl-beaker -f /tmp/environment.yml # activate env (add conda env bin to path) ENV PATH=/opt/conda/envs/chembl-beaker/bin:$PATH # copy beaker and config file COPY src/chembl_beaker chembl_beaker COPY beaker.conf beaker.conf ENTRYPOINT [ \u0026#34;python\u0026#34;, \u0026#34;chembl_beaker/run_beaker.py\u0026#34;, \u0026#34;-p\u0026#34;, \u0026#34;beaker.conf\u0026#34; ] 2. 构建镜像 # 然后运行 docker build --no-cache -f Dockerfile -t my_chembl_beaker:v1.2 .​ 这时候又会出现：debian:bookworm-slim: failed to resolve source metadata for docker.io/library/debian:bookworm-slim: failed​ ，国内的网络访问不了docker.io，拉取不了 debian_bookworm_slim 镜像， 解决方法有两个：\n1）对 docker 挂载镜像地址：vim /etc/docker/daemon.json​\n{ \u0026#34;registry-mirrors\u0026#34;: [ \u0026#34;https://docker.hpcloud.cloud\u0026#34;, \u0026#34;https://docker.m.daocloud.io\u0026#34;, \u0026#34;https://docker.unsee.tech\u0026#34;, \u0026#34;https://docker.1panel.live\u0026#34;, \u0026#34;http://mirrors.ustc.edu.cn\u0026#34;, \u0026#34;https://docker.chenby.cn\u0026#34;, \u0026#34;http://mirror.azure.cn\u0026#34;, \u0026#34;https://dockerpull.org\u0026#34;, \u0026#34;https://dockerhub.icu\u0026#34;, \u0026#34;https://hub.rat.dev\u0026#34; ] } 2）在能访问 docker.io​ 的Linux 使用 docker pull debian:bookworm-slim \u0026amp;\u0026amp; docker save -o debian_bookworm_slim.tar debian:bookworm-slim​ 然后将 debian_bookworm_slim.tar 复制到本地，使用 docker load -i debian_bookworm_slim.tar​ 加载镜像\n3. 运行 chembl_beake 后端 # 正常情况下，在 docker build --no-cache -f Dockerfile -t my_chembl_beaker:v1.2 .​ 之后就会有 my_chembl_beake 这个 docker 镜像，运行如下命令\nroot# docker run -p 5000:5000 my_chembl_beaker:v1.2 [07:40:10] Initializing Normalizer CacheThrottle class can\u0026#39;t work without cache... Failed to load plugin beaker.plugins.throttling.Throttling because of error CacheThrottle class can\u0026#39;t work without cache... Caching plugin enabled but no cache backend configured, cashing will be skipped... Bottle v0.12.18 server starting up (using GunicornServer(workers=4))... Listening on http://0.0.0.0:5000/ Hit Ctrl-C to quit. [2025-02-08 07:40:11 +0000] [1] [INFO] Starting gunicorn 20.0.0 [2025-02-08 07:40:11 +0000] [1] [INFO] Listening at: http://0.0.0.0:5000 (1) [2025-02-08 07:40:11 +0000] [1] [INFO] Using worker: sync [2025-02-08 07:40:11 +0000] [13] [INFO] Booting worker with pid: 13 [2025-02-08 07:40:12 +0000] [14] [INFO] Booting worker with pid: 14 [2025-02-08 07:40:12 +0000] [15] [INFO] Booting worker with pid: 15 [2025-02-08 07:40:12 +0000] [16] [INFO] Booting worker with pid: 16 ‍\n二、前端 molOCR​ 部署 # 1. 下载项目，运行 # ```bash git clone https://github.com/def-fun/molOCR.git unzip molOCR-master.zip \u0026amp;\u0026amp; cd molOCR-master python -m http.server Serving HTTP on :: port 8000 (http://[::]:8000/) ... ``` 这时候在 ./molOCR-master/js/img2mol.js​ 配置文件中 let OCR_API_URL = 'http://' + window.location.hostname + ':5000/image2ctab';​ //根据实际情况修改 API 的地址，实际上是不需要修改，它会自动识别你的 ip 地址，如果修改为 0.0.0.0 、 127.0.0.1 或者 localhost 反而和后端连不上（我也不知道为什么，可能是我服务器的问题）\n2. molOCR 连接 chembl_beaker # 这时候需要让前端 molOCR 和 后端 chembl_beaker 握手，学校内网的 ip 地址为 42.244.25.5 ，通过端口转发，服务器的 ip 地址为 192.168.1.8。这时候转发 molOCR 网站的本地端口 8000 到学校内网，识别会出现 无法连接 42.244.25.5:5000 （chembl_beaker 的端口） 将 chembl_beaker 的本地端口 5000 转发到学校内网，即可正常识别分子结构图片 三、设置为后台守护进程 # 将 molOCR 和 chembl_beaker 设置为后台守护进程，我将 chembl_beaker 设置为 docker compose up -d 但是有时出现不识别的情况，于是另辟蹊径，使用 systemd 服务实现\n1. 后端 chembl_beaker # ```bash sudo vim /etc/systemd/system/molocr-http.service [Unit] Description=MolOCR HTTP Server After=network.target [Service] ExecStart=/usr/bin/python -m http.server --directory /path/docker/chembl_beaker/molOCR WorkingDirectory=/path/docker/chembl_beaker/molOCR Restart=always User=jzq [Install] WantedBy=multi-user.target sudo systemctl daemon-reload sudo systemctl enable molocr-http.service sudo systemctl start molocr-http.service sudo systemctl status molocr-http.service ``` 2. 后端 chembl_beaker # ```bash sudo vim /etc/systemd/system/my_chembl_beaker.service [Unit] Description=My ChEMBL Beaker Service After=docker.service Requires=docker.service [Service] ExecStartPre=-/usr/bin/docker rm -f chembl ExecStart=/usr/bin/docker run -p 5000:5000 --name chembl my_chembl_beaker:v1.2 ExecStop=/usr/bin/docker stop $(/usr/bin/docker ps -q --filter ancestor=my_chembl_beaker:v1.2) Restart=always RestartSec=20 [Install] WantedBy=multi-user.target sudo systemctl daemon-reload sudo systemctl enable my_chembl_beaker.service sudo systemctl start my_chembl_beaker.service sudo systemctl status my_chembl_beaker.service ``` ","date":"15 February 2025","externalUrl":null,"permalink":"/blogs/250215-molocr/","section":"Blogs","summary":"molOCR 开源项目可以将图片转化学结构，对科研工作者极为方便。","title":"校园网环境下部署 molOCR","type":"blogs"},{"content":"","date":"10 February 2025","externalUrl":null,"permalink":"/tags/html/","section":"Tags","summary":"","title":"Html","type":"tags"},{"content":"在写文章时，对前人工作的引用是非常重要的，具体内容请转到 Sob 老师的文章 ：写计算化学文章时引用理论方法、基组、程序时应注意的问题。这里将一些常用的参考文献列出。\n一、计算方法 # 1. 泛函 # PBE0 (DFT) : 10.1063/1.478522\nPBE0 (TD-DFT) : 10.1063/1.479571\nB3LYP : 10.1063/1.464913\nωB97XD : 10.1039/B810189B\n2. 基组 # def2 series : 10.1039/B515623H、10.1039/B508541A\ndef series : 10.1063/1.463096、10.1063/1.467146\n6-31g(d,p)/6-31g** : 10.1080/00268977400100171\n6-311g(d,p)/6-311g** : 10.1063/1.455064\n3. 色散矫正 # Grimme’s D3 : 10.1063/1.3382344\nGrimme’s D3 (BJ) : 10.1002/jcc.21759\n4. 其他分析方法 # Electron - hole Anlysis : 10.1021/ct200308m\nIGMH : 10.1002/jcc.26812\nRDG : 10.1021/ja100936w\nHuangRhys Index : 10.1098/rspa.1950.0184\nNatural transition orbital （NTO）10.1063/1.1558471\n二、计算软件 # Gaussian 16 : 需要替换小版本号 比如 Revision C.01，Bibtex 内容为：\n@misc{g16, author={M. J. Frisch and G. W. Trucks and H. B. Schlegel and G. E. Scuseria and M. A. Robb and J. R. Cheeseman and G. Scalmani and V. Barone and G. A. Petersson and H. Nakatsuji and X. Li and M. Caricato and A. V. Marenich and J. Bloino and B. G. Janesko and R. Gomperts and B. Mennucci and H. P. Hratchian and J. V. Ortiz and A. F. Izmaylov and J. L. Sonnenberg and D. Williams-Young and F. Ding and F. Lipparini and F. Egidi and J. Goings and B. Peng and A. Petrone and T. Henderson and D. Ranasinghe and V. G. Zakrzewski and J. Gao and N. Rega and G. Zheng and W. Liang and M. Hada and M. Ehara and K. Toyota and R. Fukuda and J. Hasegawa and M. Ishida and T. Nakajima and Y. Honda and O. Kitao and H. Nakai and T. Vreven and K. Throssell and Montgomery, {Jr.}, J. A. and J. E. Peralta and F. Ogliaro and M. J. Bearpark and J. J. Heyd and E. N. Brothers and K. N. Kudin and V. N. Staroverov and T. A. Keith and R. Kobayashi and J. Normand and K. Raghavachari and A. P. Rendell and J. C. Burant and S. S. Iyengar and J. Tomasi and M. Cossi and J. M. Millam and M. Klene and C. Adamo and R. Cammi and J. W. Ochterski and R. L. Martin and K. Morokuma and O. Farkas and J. B. Foresman and D. J. Fox}, title={Gaussian 16 {R}evision {C}.01}, year={2016}, note={Gaussian Inc. Wallingford CT} } Orca : 至少要引用 10.1002/wcms.1606，此外，在 .out 输出文件中会注明可选的其他 Citation 文献。\nMultiwfn : 10.1002/jcc.22885、10.1063/5.0216272\nVMD : 10.1016/0263-7855(96)00018-5\nPySOC : 10.1021/acs.jctc.6b00915\nFCclasses3 :10.1002/jcc.27027\nCP2K : 10.1063/5.0007045\nGROMACS : 10.1016/j.softx.2015.06.001\nMOMAP\n使用 MOMAP 光物理模块发表文章的用户，需要引用以下文献： 1、Peng, Q.; Yi, Y. P.; Shuai, Z. G.; Shao, J. S., J. Chem. Phys., 2007, 126, 114302. 2、Peng, Q.; Yi, Y. P.; Shuai, Z. G.; Shao, J. S., J. Am. Chem. Soc., 2007, 129, 9333-9339. 3、Niu, Y. L.; Peng, Q.; Shuai, Z. G., Sci. China, Ser. B, 2008, 51, 1153-1158. 4、Niu, Y. L.; Peng, Q.; Deng, C. M.; Gao, X.; Shuai, Z. G., J. Phys. Chem. A, 2010, 114, 7817-7831. 5、Peng, Q.; Niu, Y. L.; Shi, Q.; Gao, X.; Shuai, Z. G., J. Chem. Theory Comput., 2013, 9, 1132-1143. 6、Shuai, Z. G.; Peng, Q., Phys. Rep., 2014, 537, 123. 使用 MOMAP 电子输运模块发表文章的用户，需要引用以下文献： 1、Geng, H.; Yin, S. W.; Chen, K. Q., Shuai, Z. G., J. Phys. Chem. B, 2005, 109, 12304. 2、Yin, S. W.; Yi, Y. P.; Li, Q. X.; Yu, G., Liu, Y. Q., Shuai, Z. G., J. Phys. Chem. A, 2006, 110, 7138. 3、Yang, X. D.; Li, Q. K.; Shuai, Z. G., Nanotechnology, 2007, 18, 424029. 4、Wang, C. L.; Wang, F. H.; Yang, X. D.; Li, Q. K., Shuai, Z. G., Org. Electron., 2008, 9, 635. 5、Yang, X. D.; Wang, L. J.; Wang, C. L.; Long, W.; Shuai, Z. G., Chem. Mat., 2008, 20, 3205. 6、Nan, G. J.; Yang, X.; Wang, L. J.; Shuai, Z. G.; Zhao, Y., Phys. Rev. B, 2009, 79, 115203. 7、Nan, G. J.; Wang, L. J.; Yang, X. D.; Shuai, Z. G.; Zhao, Y., J. Chem. Phys., 2009, 130, 024704. 8、Wang, L. J.; Nan, G. J.; Yang, X. D.; Peng, Q.; Li, Q. K.; Shuai, Z. G., Chem. Soc. Rev., 2010, 39, 423. 9、Wang, L. J., Li, Q. K., Shuai, Z. G., Chen, L. P., Shi, Q., Phys. Chem. Chem. Phys., 2010, 12, 3309. 10、Shuai, Z. G., Wang, L. J., Li, Q. K., Adv. Mater., 2011, 23, 1145. 该引用的时候一定要引原文。绝对不能说比如张三写了篇应用性文章用到了 BLYP 泛函，或者李四写了本量化书或者写了篇DFT综述介绍了BLYP，于是自己用 BLYP 的时候引张三或李四的文章就完事了。\n参考：\nhttps://bane-dysta.github.io/posts/citation/\nhttp://sobereva.com/370\n","date":"10 February 2025","externalUrl":null,"permalink":"/blogs/250210-tadfcitation/","section":"Blogs","summary":"在写文章时，对前人工作的引用是非常重要的。","title":"TADF 材料计算部分常用的 Citation","type":"blogs"},{"content":"","date":"5 February 2025","externalUrl":null,"permalink":"/tags/linux/","section":"Tags","summary":"","title":"Linux","type":"tags"},{"content":" 一、 安装并初始化 MySQL 数据库 # root# dnf install mysql-server-8.0.36-1.el9_3.x86_64 root# systemctl start mysqld root# systemctl enable mysqld root# mysql_secure_installation 二、 设置 MySQL 数据库 # root# mysql -u root -p \u0026gt; CREATE DATABASE slurm_acct_db; \u0026gt; CREATE USER \u0026#39;slurm\u0026#39;@\u0026#39;localhost\u0026#39; IDENTIFIED BY \u0026#39;your_password\u0026#39;; \u0026gt; GRANT ALL PRIVILEGES ON slurm_acct_db.* TO \u0026#39;slurm\u0026#39;@\u0026#39;localhost\u0026#39;; \u0026gt; FLUSH PRIVILEGES; \u0026gt; EXIT; CREATE USER \u0026lsquo;slurm\u0026rsquo;@\u0026rsquo;localhost\u0026rsquo; IDENTIFIED BY \u0026lsquo;jzq9093105\u0026rsquo;;\nvim /etc/my.cnf.d/mysql-server.cnf innodb_buffer_pool_size = 300G innodb_lock_wait_timeout = 900 systemctl restart mysqld 三、 配置 Slurm DBD # dnf install slurm-slurmdbd-22.05.9-1.el9.x86_64 vim /etc/slurm/slurmdbd.conf AuthType=auth/munge DbdAddr=localhost DbdHost=localhost\t# your_hostname StorageType=accounting_storage/mysql StorageHost=localhost StoragePort=3306 StoragePass=jzq9093105\t# your_password StorageUser=slurm StorageLoc=slurm_acct_db 四、配置 Slurm 控制器以使用 slurm DBD # 编辑 Slurm 的主配置文件 slurm.conf​，通常位于 /etc/slurm/​ 或 /etc/slurm-llnl/​：\nsudo vim /etc/slurm/slurm.conf 在文件中添加以下行：\nAccountingStorageEnforce=1 AccountingStorageHost=localhost # AccountingStoragePass=\t# 使用 slurmdbd 无这一项 AccountingStoragePort=6819\t# slurmdbd 的端口 AccountingStorageType=accounting_storage/slurmdbd # AccountingStorageUser=slurm AccountingStoreFlags=job_account 确保 Slurmctld​ 和 slurmdbd​ 的配置文件中使用的端口和套接字路径一致。\nscp /etc/slurm/slurm.conf root@node11:/etc/slurm/slurm.conf scp /etc/slurm/slurm.conf root@node12:/etc/slurm/slurm.conf systemctl restart slurmd.service systemctl restart slurmdbd.service systemctl restart slurmctld.service ##五、初始化 Slurm 数据库\nsacctmgr -i add cluster lab-server # your_cluster_name 将 your_cluster_name​ 替换为你的集群名称。\n六、重启 Slurm 服务 # 重启 Slurm 控制器和节点服务以应用配置更改：\nbash复制\nsudo systemctl restart slurmd sudo systemctl restart slurmctld 七、 验证配置 # 使用 sacct​ 或 sacctmgr​ 命令验证数据库是否正常工作：\nsacct 或者列出集群信息：\nsacctmgr show clusters 如果一切正常，你应该能够看到 Slurm 作业的会计信息存储在 MySQL 数据库中。\nSlurm 添加 Slurm DBD 后出现无法提交作业错误\ng16s *gjf dos2unix: 正在转换文件 QABN_tdvert.gjf 为Unix格式... sbatch: error: Batch job submission failed: Invalid account or account/partition combination specified (base) [jzq@node01 tdvert]$ systemctl status slurmctld.service ● slurmctld.service - Slurm controller daemon Loaded: loaded (/usr/lib/systemd/system/slurmctld.service; enabled; preset: disabled) Active: active (running) since Wed 2025-02-05 22:54:20 CST; 9min ago Main PID: 3637988 (slurmctld) Tasks: 17 Memory: 4.9M CPU: 173ms CGroup: /system.slice/slurmctld.service ├─3637988 /usr/sbin/slurmctld -D -s └─3637989 \u0026#34;slurmctld: slurmscriptd\u0026#34; 2月 05 22:58:38 node01 slurmctld[3637988]: slurmctld: _slurm_rpc_submit_batch_job: Invalid account or account/partition combination specified 2月 05 22:58:38 node01 slurmctld[3637988]: slurmctld: error: User 1000 not found 解决方法：\n[root@node01 ~]# sacctmgr show account Account Descr Org ---------- -------------------- -------------------- root default root account root [root@node01 ~]# sacctmgr add user name=jzq account=root Adding User(s) jzq Associations = U = jzq A = root C = lab-server Non Default Settings Would you like to commit changes? (You have 30 seconds to decide) (N/y): y [root@node01 ~]# sacctmgr show user User Def Acct Admin ---------- ---------- --------- jzq root None ljd root None root root Administ+ wjr root None ‍\n附：slurm.conf 关于 Account （Slurm DBD）参数解释 # ​​AccountingStorageEnforce​​\n用途: 控制会计存储的强制性。\n值:\n​0​: 不强制要求作业会计信息。 ​1​: 强制要求作业会计信息。 ​2​: 强制要求作业会计信息，并且会计信息不完整时拒绝作业。 建议: 如果需要严格的会计，可以设置为 1​ 。\n​​AccountingStorageHost​​\n用途: 指定会计存储后端的主机名或 IP 地址。 值: 根据你的后端存储（如 MySQL、PostgreSQL、SlurmDBD）设置相应的主机名或 IP。 建议: 如果你使用的是 MySQL，可以设置为 localhost​ 或你的 MySQL 服务器地址。 ​​AccountingStoragePass​​\n用途: 指定访问会计存储后端的密码（如果是 Slurm DBD 则不设置）。 值: 根据你的后端存储设置相应的密码。 建议: 设置一个强密码，并确保它符合后端存储的要求。 ​​AccountingStoragePort​​\n用途: 指定会计存储后端的端口号 （Slurm DBD 6819 ss -tlnp | grep 6819​）。 值: 根据你的后端存储设置相应的端口号（例如 MySQL 默认是 3306​，PostgreSQL 默认是 5432​）。 建议: 如果使用默认端口，可以保留为空或不设置。 ​​AccountingStorageType​​\n用途: 指定会计存储的类型。\n值:\n​accounting_storage/none​: 禁用会计存储。 ​accounting_storage/mysql​: 使用 MySQL 作为会计存储。 ​accounting_storage/slurmdbd​: 使用 SlurmDBD 作为会计存储。 建议: 如果需要会计功能，建议设置为 accounting_storage/mysql​ 或更高级的 accounting_storage/slurmdbd​。\n​​AccountingStorageUser​​\n用途: 指定访问会计存储后端的用户名（如果是 Slurm DBD 则不设置）。 值: 根据你的后端存储设置相应的用户名。 建议: 设置一个专门用于会计的用户名，并确保它具有足够的权限。 ​​AccountingStoreFlags​​\n用途: 指定会计存储的标记，控制哪些信息会被记录。\n值: 可以是以下一个或多个（用逗号分隔）：\n​job_comment​: 存储作业的注释信息。 ​end​: 存储作业结束信息。 ​durations​: 存储作业的持续时间。 ​job_env​: 存储作业的环境变量。 ​associative​: 存储关联信息。 ​format_std​: 存储标准格式。 ​job_account​: 存储完整的会计信息。 建议: 根据你的需求选择需要的标记。例如，job_account​ 会存储完整的会计信息。\n‍\n","date":"5 February 2025","externalUrl":null,"permalink":"/blogs/250206-slurmdbd/","section":"Blogs","summary":"Rocky Linux 在部署 Slurm 集群软件后启用 Slurm DataBase 对作业进行记录。","title":"安装 Slurm DataBase","type":"blogs"},{"content":"","date":"21 January 2025","externalUrl":null,"permalink":"/tags/knowledge/","section":"Tags","summary":"","title":"Knowledge","type":"tags"},{"content":"","date":"21 January 2025","externalUrl":null,"permalink":"/tags/paper/","section":"Tags","summary":"","title":"Paper","type":"tags"},{"content":"如果你熟悉一门编程语言以及 Markdown 标记语言，使用 Latex 投稿文章是一个不错的选择。\n一、期刊官网下载模板 # 1. 因为我投的期刊出版社是英国皇家化学会（RCS），所以下载模板的地址为：[RSC文章投稿指南](https://www.rsc.org/journals-books-databases/author-and-reviewer-hub/authors-information/#prepare-article)。里面有 Latex、Word、Chemdraw文件的模板，我们下载 Latex，是一个 zip 包 ​![image](assets/image-20250121132318-o9bo1v8.png)​ 2. zip 包中的文件有如下文件： ```sh royal-society-of-chemistry-article-template.zip └ head_foot\t# 出版社图片/格式文件，不用动 └ dates.pdf └ DOI.pdf └ header_bar.pdf └ journal_name.pdf └ LF.pdf └ RF.pdf └ RSC_LOGO_CMYK.eps └ RSC_LOGO_CMYK.pdf └ RSC_pub.pdf └ example.pdf\t# main.tex 中的示例图片，可删除。 └ example1.pdf\t# main.tex 中的示例图片，可删除。 └ example2.pdf\t# main.tex 中的示例图片，可删除。 └ main.tex\t# Latex 文件，文章正文，是我们主要编辑的文件 └ README.txt\t# 使用指南 └ Royal_Society_of_Chemistry_article_template.pdf\t# 使用 main.tex 预编译的 pdf 文件 └ rsc.bib\t# 引用文献，需要编辑 └ rsc.bst\t# 引用文献参考格式，不用动 ``` 二、 在本地或在线编辑 Latex 文件 # 1. 本地编辑需要安装 Latex 环境（[texlive](https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/ \u0026quot;https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/\u0026quot;)）和软件（[TexStudio](https://mirrors.tuna.tsinghua.edu.cn/github-release/texstudio-org/texstudio/ \u0026quot;https://mirrors.tuna.tsinghua.edu.cn/github-release/texstudio-org/texstudio/\u0026quot;)），网上有很多教程，这里不再赘述。我推荐使用在线编辑 Latex 网站 [Overleaf](https://cn.overleaf.com/ \u0026quot;https://cn.overleaf.com/\u0026quot;)，不需要配置环境和软件，只需要注册账号即可。Overleaf 有在线的模板，也可使用下载的 royal-society-of-chemistry-article-template.zip 创建项目。 ​![image](assets/image-20250121135337-kvrol2l.png)​ 2. 使用模板创建项目后，使用 Overleaf 在线编辑 main.tex 文件，如所示，左边是文件结构和文件内容大纲，中间是工作区，右边是编译的 pdf 预览图。由于 Latex 排版是所见和所得相分离，我们编辑 main.tex 完查看效果需要编译才能看到更改后的 pdf 文件效果。 ​![image](assets/image-20250121140140-kuhjuys.png)​ 3. 理解 main.tex 模板文件，在文件中出版商已经写好了每部分的格式和内容，用 %%%% 分隔，格式部分会注明：`Please do not change any commands within this section`​。main.tex 文件每个部分包括： ```txt %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %This is the LaTeX ARTICLE template for RSC journals %Copyright The Royal Society of Chemistry 2016 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ...... # 不要禁用任何在导言区（preamble）加载的包，不用动 %%%Please don't disable any packages in the preamble, as this may cause the template to display incorrectly.%%%% ......\t# 不要禁用任何在导言区（preamble）加载的包，不用动 %%%%%%%%% Preamble of the bibliography, can be commented or deleted ......\t# 参考文献部分，我们在 rsc.bib 文件中编辑，这里不用动 \\begin{document} .......\t# 文档的开始，所有的正文内容将从这里开始 %%%HEADER%%% .......\t# 页眉设置：页眉包含期刊的名称、期刊的 LOGO 等元素 %%%PAGE SETUP - Please do not change any commands within this section%%% .......\t# 页面设置：定义了文档的页面布局，例如边距、字体大小、行间距等设置。 %%%FOOTER%%% .......\t# 页脚设置：定义了页脚内容，包括页码、版权信息、期刊标识等。 %%%FIGURE SETUP - please do not change any commands within this section%%% .......\t# 图形设置：定义了图形的排版方式，例如图形插入时的间距、图形边框等。 %%%TITLE, AUTHORS AND ABSTRACT%%% .......\t# 需要编辑的标题、作者和摘要部分 %%%FONT SETUP - please do not change any commands within this section .......\t# 字体设置：定义了文档中使用的字体、大小、样式等。 %%%FOOTNOTES%%% .......\t# 脚注：定义文章中的脚注。常用提供附加信息或解释，如作者的机构、通讯作者的联系方式、补充信息等。 %%%MAIN TEXT%%%% .......\t# 正文部分：文章的核心部分。 %%%REFERENCES%%% .......\t# 参考文献设置，使用 BibTeX 文件来管理参考文献 \\end{document}\t# 结束文档 ``` 4. . 将 Word 编辑完的手稿填入 main.tex 文件中。可以看出，我们只需要编辑：标题作者摘要部分、脚注部分、正文内容、参考文献（rsc.bib 文件） 这四个部分。main.tex 文件中已经贴心的写好了很多部分的注释，以 % 开头，比如 `%The abstrast goes here instead of the text \u0026quot;The abstract should be...\u0026quot;`​ 只需要按照提示，将模板中的内容替换掉即可。 \u0026gt; 也可将写好的 Word 手稿使用文件转换为 Latex 格式，有很多在线网站和软件又可以使用。 \u0026gt; 三、对内容格式的简单介绍 # 对于熟悉 Markdown 标记语言的人来说，Latex 有很多相同的地方，一般投稿文章需要文本、图片、表格、公式、代码等元素，这里简做介绍。 1. 文本正常输入即可，有些符号需要加转义符号 `\\`​ 才能正常显示，比如 `%`​ 在 Latex 中表示 注释，需要加 `\\%`​ 才能显示为 `%`​ ，此外，还有加粗`\\textbf{加粗}`​ 、斜体`\\textit{斜体}`​、上标`^`​、下标`_`​、下划线`\\underline{带下划线}`​等等格式，可以询问 GPT。 2. 图片：有单列图和全宽图，图片文件格式为 .pdf 或者 .eps（使用 PhotoShop 或者 AdobePDF 可导出） ```txt \\begin{figure}[h] \\centering \\includegraphics[width=0.5\\textwidth]{example-image-a} % 替换为你的图片路径 \\caption{这是一个例子图片。} \\label{fig:example1} \\end{figure} ``` 3. 表格：有单列表格和全宽表格 ```txt \\begin{table}[h] \\centering \\begin{tabular}{|c|c|} \\hline 列1 \u0026amp; 列2 \\\\ \\hline 数据A \u0026amp; 数据B \\\\ 数据C \u0026amp; 数据D \\\\ \\hline \\end{tabular} \\caption{这是一个例子表格。} \\label{tab:example1} \\end{table} ``` 4. 公式：分为行内公式 `$$`​ 和独立公式 ```txt \\begin{equation} E = mc^2 \\label{eq:einstein} \\end{equation} ``` 5. 代码：行内代码和独立代码 ```txt \\begin{lstlisting}[language=Python, caption=Python 示例代码, label=lst:python_example] print(\u0026quot;Hello, world!\u0026quot;) \\end{lstlisting} ``` 四、插入参考文献 # 使用任何可以生成 BibTeX 格式的参考文献文件，将内容复制到 rsc.bib 文件中然后编译完成后，在 main.tex 使用 `\\cite{}`​ 命令引用文献，Latex 会自动生成序号以及 Bibliography ‍\n","date":"21 January 2025","externalUrl":null,"permalink":"/blogs/250121-latex/","section":"Blogs","summary":"如果你熟悉一门编程语言以及 Markdown 标记语言，使用 Latex 投稿文章是一个不错的选择。","title":"使用 Latex 论文投稿","type":"blogs"},{"content":"钟成老师 Gitee 主页：https://gitee.com/coordmagic\n","date":"7 January 2025","externalUrl":null,"permalink":"/links/","section":" ","summary":"","title":"友情链接","type":"page"},{"content":"暂无。\n","date":"7 January 2025","externalUrl":null,"permalink":"/moments/","section":" ","summary":"","title":"友情链接","type":"page"},{"content":" 一、核磁共振原理 # 氢原子的磁性：氢原子具有磁性，当处于外加磁场中时，氢原子核（质子）的自旋轴会趋向于与磁场方向一致或相反，产生不同的能量状态（能级裂分）。\n​ ​\n共振吸收：如果用特定频率的电磁波（能量激发）照射处于磁场中的氢原子核，当射频场的能量恰好等于氢原子核在不同能量状态之间的能量差时，氢原子核就会通过共振吸收电磁波的能量，从低能态跃迁到高能态。\n​ ​\n化学位移：由于分子中电子云对外加磁场强度有影响，处于分子结构中不同位置的氢原子实际感受到的磁场强度不同，因而它们发生共振吸收时所需的射频场频率也不同，在图谱上出现的位置就有差异（化学位移）。\n​ ​\n‍\n二、一维核磁分析 # 化学位移：判断氢原子的类型和所处的化学环境。连接在不同官能团上的氢原子，由于周围电子云密度不同，会有不同的化学位移值。\n峰面积与氢原子数目：在 1H-NMR 谱上，各吸收峰覆盖的面积与引起该吸收的氢核数目成正比。峰面积常以积分曲线高度表示，积分曲线总高度相当于氢核的总个数，每一相邻水平台阶高度则取决于引起该吸收的氢核数目。通过测量峰面积或积分值，可以推断出不同化学环境下氢原子的相对数目。\n自旋 - 自旋耦合和裂分：相邻碳上质子之间存在自旋偶合作用，会引起吸收峰裂分。例如，一个质子共振峰若不受相邻质子的自旋偶合影响，表现为一个单峰；若受其影响，就可能表现为一个二重峰（强度相等，总面积和未分裂的单峰面积相等），或者更复杂的多重峰。耦合常数（用 J 表示）可以表明核与核之间的关系。\n​ ​\n三、识别二维 1H-1H 核磁谱图 # 二维核磁谱图用于分析分子中氢原子之间的空间关系和连接性：对于二维 1H-1H 核磁谱图，横纵坐标都是信号相同的一维的 H 谱（可以理解微 $y=x$ ），图上的对角线信号则表示自身出现的耦合作用（ $y_n∽x_n$ ）。而重点是其他位置交叉出现的信号，即表示两种不同的 H 存在自旋 - 自旋耦合裂分作用（ $y_n∽x_m$ ）两种 H 在分子结构上相邻（近）。\n举个 🌰：下面两张图是两个物质的二维 H-H 核磁谱图实线连接点为相同氢的偶合，而虚线的连接点为交叉峰表示相邻氢之间的偶合，更为重要些。 ​ ​\n​ ​\n注意：\n有时对于较远的偶合也会出现相关峰。因此，显示相关峰的核之间不一定就是相隔三根键。 ​ 偶合常数 J 为零的 H 之间不出现相关峰。因此，不出现相交峰的 1H 核之间也有可能是相邻的（对称性环境中的等价氢）。 ‍\n参考资料：\nhttps://blog.csdn.net/Allenkx/article/details/135605859\n‍\n","date":"7 January 2025","externalUrl":null,"permalink":"/blogs/250109-2dnmr/","section":"Blogs","summary":"与一维NMR光谱相比，二维NMR光谱在两个维度上展开数据，增加了分辨率和解析度。","title":"识别二维核磁共振氢谱","type":"blogs"},{"content":"在更换 SSL 证书后，Logto 控制台出现 Internal server error.\n参考：Chat GPT，Emmanuel Corrales.\n一、报错与排查： # 课题组登录的 lobe chat database （GPT 代理网站）由 Logto 作为鉴权应用，前几日更换了 Let\u0026rsquo;s encrypt 颁发的证书，发现 Logto 登录页面无法访问，访问控制台出现 Internal server error. 查看 docker 日志有：\n[cause]: Error: unable to verify the first certificate at TLSSocket.onConnectSecure (node:_tls_wrap:1677:34) at TLSSocket.emit (node:events:518:28) at TLSSocket._finishInit (node:_tls_wrap:1076:8) at ssl.onhandshakedone (node:_tls_wrap:862:12) { code: \u0026#39;UNABLE_TO_VERIFY_LEAF_SIGNATURE\u0026#39; 询问 GPT 给出的答案均为 在 SSL/TLS 连接过程中，客户端无法验证服务器证书的有效性​ ，由于能够正常访问其他该 SSL 证书加密的网站，我第一反应是 Logto 缓存中停留的上一份 SSL 证书与当前证书不匹配。在仔细研究 Logto 的部署文档，重新调试了 docker 容器均无果，于是在 bing 上搜索。在 https://emcorrales.com/blog/nodejs-debugging-and-fixing-https-ssl-issues-caused-by-changing-the-self-signed-certificate 找到了类似问题的原因。\n​![[image-20250107085331-b9z89l3.png]] ​\n根据测试 SSL 命令有：\nroot$ openssl s_client -connect api.example.com:443 ... Start Time: 1736184337 Timeout : 7200 (sec) Verify return code: 21 (unable to verify the first certificate) Extended master secret: no Max Early Data: 0 --- read R BLOCK 可以发现与 docker 日志中出现了相同的 unable to verify the first certificate​ ，证明是 SSL 的问题。\n二、解决： # 查看之前的 nginx SSL 证书文件发现，之前的证书文件夹都是 4 个文件，而新安装的证书只有两个文件cert.pem privkey.pem​ 。\n于是将申请证书生成的 cert.pem chain.pem fullchain.pem privkey.pem​ 四个文件拷贝到 nginx docker 挂载的证书目录中 ./nginx/data/custom_ssl/npm-27​ ，重启 docker 容器，问题解决 ~\ncert.pem（有时也称为 server.crt 或 public.crt）: 这个文件包含了你的公钥证书，也就是由证书颁发机构(CA)签名的数字证书。它用来证明网站的身份，并且包含公钥，客户端可以用这个公钥来加密与服务器之间的通信。\nchain.pem（有时也称为 ca_bundle.crt）: 该文件包含了中间证书链，这些证书链接了你的证书(cert.pem)到CA的根证书。不是所有的情况都需要这个文件，取决于CA和你所使用的证书类型。但是，提供完整的证书链可以确保浏览器能够验证你的证书，从而顺利完成SSL/TLS握手。\nfullchain.pem : 这个文件是一个组合文件，它将你的证书(cert.pem)和整个证书链(chain.pem)合并到了一个文件中。使用这个文件可以让服务器更容易地配置SSL/TLS，因为只需要指定一个文件即可提供所有的证书信息。\nprivkey.pem（有时也称为private.key）: 这个文件包含了与你的公钥证书相对应的私钥。私钥用于解密用公钥加密的数据，并且在建立安全连接时进行身份验证。私钥必须严格保密，不应该泄露给任何人。\n‍\n","date":"7 January 2025","externalUrl":null,"permalink":"/blogs/250107-logto/","section":"Blogs","summary":"在更换 SSL 证书后，Logto 控制台出现 Internal server error.","title":"Logto | 控制台出现 Internal server error","type":"blogs"},{"content":" 一、安装 certbot # Install system dependencies\nsudo apt update sudo apt install python3 python3-venv libaugeas0 Set up a Python virtual environment\nsudo python3 -m venv /opt/certbot/ sudo /opt/certbot/bin/pip install --upgrade pip Install Certbot\nsudo /opt/certbot/bin/pip install certbot certbot-nginx Prepare the Certbot command\nsudo ln -s /opt/certbot/bin/certbot /usr/bin/certbot 二、申请证书 # certbot certonly -d *.alpharay.space --manual --preferred-challenges dns --server https://acme-v02.api.letsencrypt.org/directory 输入邮箱地址，同意条款等（输入 y ），然后就需要去域名解析那边配置一个 txt 解析记录（dnspod 控制台）\nPress Enter to Continue Waiting for verification... Resetting dropped connection: acme-v02.api.letsencrypt.org Cleaning up challenges Subscribe to the EFF mailing list (email: wangwen135@gmail.com). Starting new HTTPS connection (1): supporters.eff.org IMPORTANT NOTES: - Congratulations! Your certificate and chain have been saved at: /etc/letsencrypt/live/alpharay.space/fullchain.pem Your key file has been saved at: /etc/letsencrypt/live/alpharay.space/privkey.pem Your certificate will expire on 2024-08-13. To obtain a new or tweaked version of this certificate in the future, simply run certbot again. To non-interactively renew *all* of your certificates, run \u0026#34;certbot renew\u0026#34; - If you like Certbot, please consider supporting our work by: Donating to ISRG / Let\u0026#39;s Encrypt: https://letsencrypt.org/donate Donating to EFF: https://eff.org/donate-le 证书存储在 /etc/letsencrypt/live/yourdomain.com​ ，申请成功！\n三、在 Nignx 中配置 # 登录 Nignx 后台，在 SSL certificates 中选择 Add SSL certificates - custom，将 privkey.pem 和 cert.pem 分别填入 Certificate Key 和 Certificate 中，即可使用证书。\n​ ‍\n","date":"5 January 2025","externalUrl":null,"permalink":"/blogs/250105-certbotssl/","section":"Blogs","summary":"Linux 服务器使用 Certbot 申请 SSL 证书。","title":"Certbot 申请 SSL 证书","type":"blogs"},{"content":"","date":"5 January 2025","externalUrl":null,"permalink":"/categories/life/","section":"Categories","summary":"","title":"Life","type":"categories"},{"content":"瑞·达利欧是桥水基金的创始人之一，该纪录片分享了他多年来对全球经济波动的观察与理解。这个纪录片提供了一个清晰的经济理论框架，适合没有经济学基础的观众理解经济现象的本质。\n视频链接：经济机器是怎样运行的\n一、经济机器的简化模型 # 尽管经济系统看起来复杂，但它的运行其实是可以通过一个简单的机械模型来理解的。这个模型可以帮助我们理解经济如何在多种因素的作用下波动，以及如何通过观察这些因素来预测经济走势。\n经济的运行是由几种简单的“零部件”组成的，而这些“零部件”主要包括以下三大因素：生产率的提高、短期债务周期和长期债务周期。每一种因素的变化都会对经济产生深远的影响，而这些因素之间的互动形成了经济的周期性波动。\n1. 生产率的提高 # 生产率是指单位时间内生产的商品或服务的数量。生产率的提高是经济增长的核心驱动力。随着技术进步、劳动者技能的提升、资本投入的增加等因素，经济的生产效率会不断提升，推动总产出的增加。\n2. 短期债务周期 # 短期债务周期指的是经济中债务的变化周期。人们通常会通过借债来增加支出，这种借债行为会刺激消费和投资，从而推动经济增长。然而，当债务过度增加时，会导致通货膨胀和资产泡沫，最终引发经济衰退。在短期内，央行的货币政策、利率变化以及借款人的信贷需求等因素，会对债务周期产生重大影响。\n3. 长期债务周期 # 长期债务周期的变化则反映了经济中长期债务水平的变化。长期债务周期通常持续几十年，它的变化主要是由信贷总量的变化、利率的波动以及债务负担的积累决定的。当信贷过度扩张时，经济会进入繁荣期，但当债务负担过重时，经济则会进入衰退期。长期债务周期通常由人类的行为习惯所推动，例如人们倾向于借更多的钱，而不是还钱。\n二、交易与市场：经济中的基本动力 # 在了解了经济的运行机制后，然后进一步解释了经济中的两大基本动力：交易和市场。\n1. 交易 # 经济活动的基本单位是交易。每一笔交易都涉及到交换——在交易中，人们付出某样东西以换取他们需要的其他东西。交易的核心是市场需求与供给的互动，这种互动决定了价格的波动以及资源的配置。虽然市场的变化可能受到很多外部因素的影响，但基本的市场规律仍然遵循供需法则，交易是经济增长的重要推动力。\n2. 市场 # 市场是交易的集中体现，它将所有参与者聚集在一起，进行商品和服务的交换。市场通过价格机制来引导资源的分配。当市场需求增加时，价格上升，生产者便会增加产量，反之亦然。市场的运作也受到信贷的影响。借贷的增加会带来更多的购买力，推动需求的增长，反之，借贷的减少则可能导致需求的萎缩，进而影响经济的整体表现。\n3. 信贷 # 瑞·达利欧特别强调信贷在经济中的重要性。信贷不仅是市场交易的“润滑剂”，还是推动经济周期的关键因素。信贷的供给和需求直接影响了经济的扩张与收缩。当信贷扩张时，经济活动加剧，需求增加，企业和个人的支出也会增加，从而推动经济增长。然而，过度的信贷扩张会导致泡沫的产生，最终可能导致金融危机。因此，信贷的合理管理对经济的稳定至关重要。\n三、经济周期的本质：从短期债务到长期债务 # 经济的波动并不是偶然发生的，经济周期的波动源自于信贷的变化，尤其是债务的变化。在经济的周期性波动中，短期债务周期和长期债务周期的互动起着至关重要的作用。\n1. 短期债务周期 # 短期债务周期的持续时间通常为5到8年，它主要由经济活动的变化所驱动。短期债务周期可以分为扩张期和衰退期。当经济处于扩张阶段时，借贷增加，支出也随之增加，企业的投资和消费需求增长，推动经济繁荣。然而，随着债务水平的上升，央行可能通过加息来遏制过度的经济扩张，导致信贷的紧缩，从而进入衰退阶段。\n在衰退阶段，消费者和企业的支出减少，债务偿还压力增加，经济活动陷入低迷。为了刺激经济增长，央行会通过降息等手段增加信贷供给，从而进入下一轮扩张期。这一过程不断循环，构成了经济的短期债务周期。\n2. 长期债务周期 # 长期债务周期的持续时间较长，通常为几十年。它反映了债务总量的积累过程。在长期债务周期中，信贷的扩张导致债务负担的增加，直到债务负担变得不可持续，经济进入衰退期。在这种情况下，政府和央行通常会采取措施，通过债务违约、重组、货币宽松等手段来减轻债务负担，进而恢复经济增长。\n长期债务周期的变化往往受到多个因素的影响，包括利率的变化、债务的积累速度以及金融体系的稳定性。当债务负担过重时，经济将经历一个去杠杆化过程，企业和家庭开始削减债务，信用消失，市场出现资产价格下跌的现象，这时经济会进入长期的衰退期。\n四、如何应对去杠杆化？ # 去杠杆化是指在债务水平过高时，通过减少债务负担来恢复经济健康的过程。在去杠杆化过程中，债务的清偿通常会伴随着收入的减少、信贷的紧缩和资产价格的下跌。为了应对这种情况，瑞·达利欧提出了四种应对策略：\n1. 削减支出（紧缩）： # 当经济过度负债时，政府、企业和个人都会采取减少支出的措施来降低债务负担。然而，紧缩政策往往会导致收入下降，从而加剧经济衰退。因此，紧缩措施往往并不容易实施。\n2. 债务违约与重组： # 在去杠杆化过程中，很多借款人无法偿还债务，因此债务违约和重组成为常见的解决方案。通过债务重组，借款人和贷款人达成协议，减少债务负担，从而缓解经济压力。\n3. 财富再分配： # 将财富从富人转给穷人。在经济衰退期间，政府通常会采取刺激政策，自然而然地增加对富人的征税，以帮助经济中的财富再分配，把财富从富人那里转给穷人。正在困苦当中的穷人开始怨恨富人；承受 经济疲弱、资产贬值 和 增税压力 的富人开始怨恨穷人。如果萧条继续下去，就会爆发社会动荡。\n4. 债务货币化： # 一些国家选择通过货币政策来解决债务问题，即央行通过货币宽松、印发货币等手段为政府融资。然而，这种方式可能导致通货膨胀，甚至引发货币危机。\n五、总结 # 瑞·达利欧对经济机器的简化模型和经济周期的分析，我们可以看到经济的波动并非完全不可预测。生产率的提高、短期和长期债务周期的变化，以及信贷的供给和需求是推动经济发展的核心动力。而这些因素之间的互动构成了经济周期的波动。在经济衰退期间，去杠杆化的过程虽然痛苦，但也为经济健康复苏提供了必要的调整机制。\n对于普通人来说，理解这些经济基本规律，尤其是债务与信贷的影响，有助于更好地应对经济波动，避免因短视行为导致的经济损失。同时，政策制定者也可以根据这些规律，设计出更为合理的货币和财政政策，减少经济危机带来的负面影响。\n","date":"5 January 2025","externalUrl":null,"permalink":"/blogs/250105-jingjijiqi/","section":"Blogs","summary":"在B站刷到过瑞·达利欧（Ray Dalio）制作的《经济机器是怎样运行的》纪录片，印象深刻，这里简做摘要。","title":"经济机器是怎样运行的","type":"blogs"},{"content":"部署 Halo 博客，并链接到不同 docker compose 部署的 postgres SQL​ 数据库（postgres SQL docker 是之前部署 lobe chat database 所建立的）。\n一、在已有的 postgres SQL​ 创建新数据库 名称为 halo # docker exec -it lobe-postgres bash # 进入 postgres SQL 容器 root@c885cce584ec:/# su postgres # 切换用户 postgres@c885cce584ec:~$ psql # 登录 postgre sql psql (16.4 (Debian 16.4-1.pgdg120+2)) Type \u0026#34;help\u0026#34; for help. postgres=# \\list # 列出已有的数据库 postgres=# CREATE DATABASE halo; # 建立新数据库 CREATE DATABASE # 已经建立好数据库 查看之前 lobe chat database 中的环境变量得知：\n# Postgres 相关，也即 DB 必需的环境变量 # 必填，用于加密敏感信息的密钥，可以使用 openssl rand -base64 32 生成 KEY_VAULTS_SECRET=Kix******X51E/ZPAd36B********KjPtz2sGztqQ= # 必填，Postgres 数据库连接字符串，用于连接到数据库 # 格式：postgresql://username:password@host:port/dbname，如果你的 pg 实例为 Docker 容器且位于同一 docker-compose 文件中，亦可使用容器名作为 host DATABASE_URL=postgresql://postgres:uWNZ*****xf8dxC@postgresql:5432/lobe 已经建立的 Docker postgres 数据库的 docker-compose.yaml 文件，注意不能更改网络模式，否则原来的 lobe chat database 无法连接到 postgres SQL​ 数据库！\nservices: postgresql: image: pgvector/pgvector:pg16 container_name: lobe-postgres ports: - \u0026#39;5432:5432\u0026#39; # docker 容器的端口转发，使用 localhost:5432 可访问 volumes: - \u0026#39;./data:/var/lib/postgresql/data\u0026#39; environment: - \u0026#39;POSTGRES_DB=lobe\u0026#39; # 数据库名称 - \u0026#39;POSTGRES_PASSWORD=uWNZ******f8dxC\u0026#39; # 密码（管理员 postgres 的密码） healthcheck: test: [\u0026#39;CMD-SHELL\u0026#39;, \u0026#39;pg_isready -U postgres\u0026#39;] interval: 5s timeout: 5s retries: 5 restart: always 二、参考 Halo博客 docker compose install 文档 # 建立 Halo 博客容器，编辑 docker-compose.yaml​\nservices: halo: container_name: halo image: halohub/halo:2.20.13 restart: on-failure:3 network_mode: \u0026#34;host\u0026#34; volumes: - ./halo2:/root/.halo2 environment: # JVM 参数，默认为 -Xmx256m -Xms256m，可以根据实际情况做调整，置空表示不添加 JVM 参数 - JVM_OPTS=-Xmx256m -Xms256m command: # 修改为自己已有的 MySQL 配置 - --spring.r2dbc.url=r2dbc:pool:postgresql://localhost:5432/halo # 查看文档部署，对应参数 - --spring.r2dbc.username=postgres - --spring.r2dbc.password=uWN*****f8dxC - --spring.sql.init.platform=postgresql # 外部访问地址，请根据实际需要修改 - --halo.external-url=https://blog.alpharay.space/ # 端口号 默认8090 - --server.port=8090 格式：postgresql://username:password@host:port/dbname，如果你的 pg 实例为 Docker 容器且位于同一 docker-compose 文件中，亦可使用容器名作为 host\nDATABASE_URL=postgresql://postgres:uW*******8dxC@postgresql:5432/lobe\n如果 PostgreSQL 部署在本地机器上，host 可以是 localhost 或 127.0.0.1，表示本机。\n如果 PostgreSQL 部署在远程机器上，host 就是 PostgreSQL 服务器的 IP 地址或域名。\n如果 PostgreSQL 运行在 Docker 容器中，并且使用 Docker Compose 进行管理，host 是指容器的名称或 Docker Compose 文件中的服务名称。\n然后使用 docker compose up -d​ 命令启用容器，访问服务器ip:8090 初始化网站，在 Nginx 中设置代理，Halo 博客部署完毕。\n附：数据备份 # 对 dockers 挂载的 halo2 目录结构发现没有文章存放的位置，而网站的备份工具是将当前文件夹 zip\n./halo └──attachments # 附件 └──backups # 备份 └──indices # 索引 └──keys # 密钥 └──logs # 日志 └──plugins # 插件 └──themes # 主题，对 ./theme-earth/templates/modules/hero.html 编辑可进一步自定义主页样式 于是测试是否会备份存储在 SQL 数据库中的文章，先在控制台备份数据到本地，将 docker 和 database 重置，然后在控制台上传 backpack 文件恢复，发现所有数据包括文章已经得到恢复。\n只重置 docker 不重置 SQL 数据库，访问网站会出现 404 报错。\ndocker 重置是删除容器，重命名挂载文件夹；SQL 数据库重置是删除数据库然后新建同名数据库。\n","date":"4 January 2025","externalUrl":null,"permalink":"/blogs/250104-haloblogs/","section":"Blogs","summary":"部署 Halo 博客，并链接到不同 docker compose 部署的 \u003ccode\u003epostgres SQL\u003c/code\u003e​ 数据库。","title":"部署 Halo 博客 | 连接到外部 Docker postgres 数据库","type":"blogs"},{"content":" 关于我 个人介绍 职业：在读研究生，方向：有机光电材料，理论计算。\n背景：现在在江苏苏州，本科读的化学师范专业。\n个人兴趣：电脑技术（Linux、Mac OS、Windows）、读书。\n联系方式 QQ：2091816477\n邮件：ge6477@outlook.com\n关于博客 内容：记录生活、知识经验。\n方向：关于人生经历、电脑技术、有机化学、计算化学。\n","date":"1 January 2025","externalUrl":null,"permalink":"/about/","section":" ","summary":"","title":"关于","type":"page"},{"content":"如果你看到了这一篇文章，那么证明你已经安装成功了，感谢使用 Hugo，希望能够使用愉快。\n官网：https://gohugo.io/\n文档：https://gohugo.io/documentation/\n主题：https://themes.gohugo.io/\n中文社区：https://discourse.gohugo.io/\n开源地址：https://github.com/gohugoio/hugo\n","date":"1 January 2025","externalUrl":null,"permalink":"/blogs/250101-helloworld/","section":"Blogs","summary":"H如果你看到了这一篇文章，那么证明你已经安装成功了，感谢使用 Hugo，希望能够使用愉快。","title":"Hello, world ！","type":"blogs"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]